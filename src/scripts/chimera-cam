#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

# chimera - observatory automation system
# Copyright (C) 2006-2007  P. Henrique Silva <henrique@astro.ufsc.br>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


from chimera.core.cli import ChimeraCLI, action, ParameterType

from chimera.core.callback import callback
from chimera.core.exceptions import printException
from chimera.interfaces.filterwheel import InvalidFilterPositionException

import os
import sys
import time
import warnings

currentFrame = 0
currentFrameExposeStart = 0
currentFrameReadoutStart = 0
DS9 = None

class ChimeraCam (ChimeraCLI):
    
    def __init__ (self):
        ChimeraCLI.__init__(self, "chimera-cam", "Camera controller", 0.1)
        
        self.ds9 = None
        
        self.addHelpGroup("CAM", "Camera and Filter Wheel configuration")
        self.addInstrument(name="camera", cls="Camera",
                           help="Camera instrument to be used. If blank, try to guess from chimera.config",
                           helpGroup="CAM", required=True)
        
        self.addDriver(instrument="camera", name="cameradriver", short="d",
                       helpGroup="CAM",
                       help="Camera driver to be used /Class/name?option1=value1,option2=value")
        
        self.addInstrument(name="wheel", cls="FilterWheel",
                           help="Filter Wheel instrument to be used. If blank, try to guess from chimera.config",
                           helpGroup="CAM")
        
        self.addDriver(instrument="wheel", name="wheeldriver", long="wheel-driver", 
                       helpGroup="CAM",
                       help="Filter Wheel driver to be used /Class/name?option1=value1,option2=value")

        self.addHelpGroup("EXPOSE", "Exposure control")
        self.addParameters(dict(name="frames", short="n", type="int", default=1, helpGroup="EXPOSE", help="Number of frames"),
                           dict(name="exptime", short="t", type="float", default=1, helpGroup="EXPOSE",
                                help="Integration time in seconds for each frame"),
                           dict(name="interval", short="i", type="float", default=0.0, helpGroup="EXPOSE",
                                help="Number of seconds to wait between each frame"),
                           dict(name="output", short="o", type="string", helpGroup="EXPOSE",
                                help="Base filename including full path if needed.",
                                default="$date.fits"),
                           dict(name="filter", short="f", type="string", helpGroup="EXPOSE",
                                help="Filter to be used. "
                                     "Use --filters to get a list of available filters"),
                           dict(name="shutter", type=ParameterType.CHOICE, helpGroup="EXPOSE",
                                choices=["open", "OPEN", "close", "CLOSE", "leave", "LEAVE"],
                                default="OPEN",
                                help="What to do with the shutter: open, close, leave (case insensitive)"))
        
        self.addHelpGroup("DISPLAY", "Display configuration")
        self.addParameters(dict(name="no_display", long="no-display", type=ParameterType.BOOLEAN,
                                helpGroup="DISPLAY",
                                help="Don't try to display image on DS9. default is display for exptime >= 5"),
                           dict(name="force_display", long="force-display", type=ParameterType.BOOLEAN,
                                helpGroup="DISPLAY",
                                help="Always display image on DS9 regardless of exptime."))
    
        self.addHelpGroup("TEMP", "Temperature control")
        self.addParameters(dict(name="wait", short="w", type=ParameterType.BOOLEAN,
                                default=False,
                                helpGroup="TEMP",
                                help="Wait until the selected CCD setpoint is achived."))
        
    @action(short="F", helpGroup="EXPOSE", help="Print available filter names.")
    def filters(self, options):
        if not options.wheel:
            self.exit("No Filter Wheel found. Edit chimera.config or pass --wheel/--wheel-driver (see --help)")
        
        self.out("Available filters:", end="")
        
        for i,f in enumerate(options.wheel.getFilters()):
            self.out(str(f), end="")
        
        self.out()
        
    @action(name="setpoint", long="start-cooling", actionGroup="TEMP",
            type="float",
            helpGroup="TEMP", help="Start camera cooling, using the defined SETPOINT",
            metavar="SETPOINT")
    def startCooling (self, options):
        
        def eps_equal(a, b, eps=0.01):
            return abs(a-b) <= eps

        camera = options.camera
        
        if options.wait:
            timeout = 4*60 # FIXME: configurable?
        
        start = time.time()

        self.out(40*"=")
        
        camera.startCooling(options.setpoint)
        self.out("setting camera setpoint to %.3f." % options.setpoint)
        
        if options.wait:
            while not eps_equal(camera.getTemperature(), camera.getSetPoint(), 0.2):
                self.out("\rwaiting setpoint temperature %.3f oC, current: %.3f oC" \
                    % (camera.getSetPoint(), camera.getTemperature()), end="")
                time.sleep(1)
    
                if time.time() > (start+timeout):
                    self.out("giving up after wait for %d seconds" % timeout)
                    break
    
            self.out("OK (took %.3fs)" % (time.time()-start))
    
        self.out(40*"=")
        self.exit()        

    @action(long="stop-cooling", actionGroup="TEMP",
            helpGroup="TEMP", help="Stop camera cooling")
    def stopCooling (self, options):
        camera = options.camera

        self.out(40*"=")
        self.out("stopping camera cooling...", end="")
        camera.stopCooling()
        self.out("OK")        
        self.out(40*"=")
        self.exit()

    @action(help="Print camera information and exit")
    def info(self, options):
        camera = options.camera
        
        self.out("Camera:", camera["driver"], "(%s)" % camera.getDriver()["device"])
    
        if camera.isCooling() == True:
            self.out("Cooling enabled, setpoint: %.3f oC" % camera.getSetPoint())
        else:
            self.out("Cooling disabled.")
    
        self.out("Current CCD temperature: %.3f oC" % camera.getTemperature())
        self.exit()
    
    @action(default=True, helpGroup="EXPOSE", help="Take an exposure with selected parameters")
    def expose(self, options):
        
        camera = options.camera
    
        # make files in the current directory if path is not absolute
        if not os.path.isabs(options.output):
            options.output = os.path.join(os.getcwd(), options.output)
            
        if (not self.options.no_display and options.exptime >= 5) or options.force_display:
            self._setupDS9()
        
        @callback(self.localManager)
        def exposeBegin(exptime):
            global currentFrame, currentFrameExposeStart
            currentFrameExposeStart = time.time()
            currentFrame += 1
            self.out(40*"=")
            self.out("[%03d/%03d] [%s]" % (currentFrame, options.frames, time.strftime("%c")))
            self.out("exposing (%.3fs) ..." % exptime, end="")
        
        @callback(self.localManager)
        def exposeComplete():
            global currentFrameExposeStart
            self.out("OK (took %.3f s)" % (time.time()-currentFrameExposeStart))
    
        @callback(self.localManager)
        def readoutBegin(filename):
            global currentFrameReadoutStart
            currentFrameReadoutStart = time.time()
            self.out("reading out and saving to %s ..."  % filename, end="")
                
        @callback(self.localManager)
        def readoutComplete(filename):
            global currentFrame, currentFrameExposeStart, currentFrameReadoutStart, DS9
            self.out("OK (took %.3f s)"  % (time.time()-currentFrameReadoutStart))
            self.out("[%03d/%03d] took %.3fs" % (currentFrame, options.frames,
                                              time.time()-currentFrameExposeStart))
            
            if DS9 != None:
                try:
                    DS9.showFITSFile(filename)
                except RuntimeError, e:
                    self.err("Can't display image %s. (%s)" % (filename,e))

    
        camera.exposeBegin     += exposeBegin
        camera.exposeComplete  += exposeComplete
        camera.readoutBegin    += readoutBegin
        camera.readoutComplete += readoutComplete
        
        self.out(40*"=")
        self.out("Taking %d frame[s] of %.3fs each" % (options.frames, options.exptime))
        self.out("Shutter: %s" % options.shutter)
        self.out("Interval between frames: %.3fs" % options.interval)
        if camera.isCooling():
            self.out("Cooling enabled, setpoint: %.3f oC" % camera.getSetpoint())
        else:
            self.out("Cooling disabled.")

        self.out("Current CCD temperature: %.3f oC" % camera.getTemperature())

        if options.filter != None:
            self.out("Filter: %s" % options.filter)
        
        if options.filter != None and options.wheel:
            self.out(40*"=")
            try:
                self.out("Changing to filter %s... " % options.filter, end="")
                options.wheel.setFilter(options.filter)
                self.out("OK")
            except InvalidFilterPositionException, e:
                self.out("ERROR. Couldn't move filter wheel to %s. (%s)" % (options.filter, e))
                time.sleep(3)

        # finally, expose
        start = time.time()
        
        try:
            try:
                camera.expose(exp_time=options.exptime,
                              frames=options.frames,
                              interval=options.interval,
                              filename=options.output,
                              shutter=options.shutter)
            except Exception, e:
                self.err("Error trying to take exposures. (%s)" % printException(e))
        finally:
            camera.exposeBegin     -= exposeBegin
            camera.exposeComplete  -= exposeComplete
            camera.readoutBegin    -= readoutBegin
            camera.readoutComplete -= readoutComplete

            self.out(40*"=")
            self.out("Total time: %.3fs" % (time.time()-start))
            self.out(40*"=")
            self.out("%s" % time.strftime("%c"))            
            self.out(40*"=")

    def _setupDS9(self):
        
        global DS9

        try:
            # disable RO warning
            warnings.filterwarnings(action='ignore', module='RO.DS9')
            from RO.DS9 import DS9Win
            DS9 = DS9Win(doRaise=True, doOpen=True)
        except ImportError:
            self.err(40*"=")
            self.err("DS9 is not available. Display disabled")
        except RuntimeError:
            # even with RO installed, we still need XPA package to get DS9 working
            self.err(40*"=")                
            self.err("DS9 is not available, check if you have the XPA package installed. Display disabled.")
    
def main():
    cli = ChimeraCam()
    return cli.run(sys.argv)
    
if __name__ == '__main__':
    main()
