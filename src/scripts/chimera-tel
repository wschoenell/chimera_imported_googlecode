#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

# chimera - observatory automation system
# Copyright (C) 2006-2007  P. Henrique Silva <henrique@astro.ufsc.br>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import sys
import os
import time
import logging

from optparse import OptionParser

from chimera.core.manager import Manager
from chimera.core.version import _chimera_version_, _chimera_description_

from chimera.instruments.telescope import Telescope

from chimera.util.position import Position

from chimera.core.exceptions import ObjectNotFoundException
from chimera.core.exceptions import ChimeraObjectException
from chimera.core.exceptions import InvalidLocationException

from chimera.core.site import Site

from chimera.core.location import Location

from chimera.core.callback import callback

from chimera.core.log import setConsoleLevel
#setConsoleLevel(logging.DEBUG)
setConsoleLevel(1e9)

if __name__ == '__main__':

    chimera_tel_description = " - Telescope controller"

    def check_includepath (option, opt_str, value, parser):
        if not value or not os.path.isdir (os.path.abspath(value)):
            raise optparse.OptionValueError ("Couldn't found %s include path." % value)
        eval ('parser.values.%s.append ("%s")' % (option.dest, value))

    def check_location (option, opt_str, value, parser):
        try:
            l = Location (value)
        except InvalidLocationException:
            raise optparse.OptionValueError ("%s isnt't a valid location." % value)

        eval ('parser.values.%s.append ("%s")' % (option.dest, value))


    parser = OptionParser(prog="chimera-tel", version=_chimera_version_,
                          description=_chimera_description_+chimera_tel_description)

    parser.add_option("-t", "--telescope", action="callback", type="string", dest="telescope",
                      help="Telescope instrument to be used. If blank, create a new"
                      " telescope instance, using the the driver selected with --driver."
                      " format: [host:port]/Class/name. [default=\"\"]",
                      callback=check_location)

    parser.add_option("-d", "--driver", action="callback", type="string", dest="driver",
                      help="Telescope driver to be used."
                      " /Class/name?option1=value1,option2=value. [default=%default]",
                      callback=check_location)

    parser.add_option("-D", "--drivers-dir", action="callback", callback=check_includepath,
                      dest="drv_dir", type="string",
                      help="Append PATH to drivers load path.",
                      metavar="PATH")

    parser.add_option("-s", "--slew", action="store_true", dest="slew",
                      help="Slew [default=%default]")

    parser.add_option("-S", "--sync", action="store_true", dest="sync",
                      help="Sync [default=%default]")

    parser.add_option("-i", "--info", action="store_true", dest="info",
                      help="Print telescope information and exit [default=%default]")

    parser.add_option("--ra", action="store", type="string", dest="ra",
                      help="Right Ascension.")

    parser.add_option("--dec", action="store", type="string", dest="dec",
                      help="Declination.")

    parser.add_option("--epoch", action="store", type="string", dest="epoch",
                      help="Epoch [default=%default]")

    parser.add_option("--az", action="store", type="string", dest="az",
                      help="Local Azimuth.")

    parser.add_option("--alt", action="store", type="string", dest="alt",
                      help="Local Altitude.")

    parser.add_option("-q", "--quiet", action="store_true", dest='quiet',
                      help="Don't display informations while working [default=%default].")


    prefix = os.path.realpath(os.path.join(os.path.abspath(__file__), '../../chimera/'))
    drivers_path = [os.path.join(prefix, 'drivers')]

    parser.set_defaults(telescope= [],
                        driver   = ["/Meade/meade?device=/dev/ttyS6"],
                        drv_dir  = [],
                        quiet    = False,
                        slew     = False,
                        info     = False,
                        sync     = False,
                        ra = None,
                        dec = None,
                        epoch="J2000",
                        az = None,
                        alt = None)


    options, args = parser.parse_args(sys.argv)

    # some validations

    target = None
    local  = False

    if (options.slew or options.sync) and not options.info:
    
        if (options.ra != None or options.dec != None) and \
                (options.az != None or options.alt != None):
            print >> sys.stderr, "RA/DEC and AZ/ALT given at the same time, I don't know what to do."
            sys.exit(1)

        if (options.ra != None) and (options.dec != None):
            try:
                target = Position.fromRaDec(options.ra, options.dec, options.epoch)
            except Exception, e:
                print >> sys.stderr, "Invalid RA/DEC (%s)" % e
                sys.exit(1)

        elif (options.az != None) and (options.alt != None):
            try:
                target = Position.fromAzAlt(options.az, options.alt)
                local = True
            except Exception, e:
                print >> sys.stderr, "Invalid AZ/ALT (%s)" % e
                sys.exit(1)
        else:
            print >> sys.stderr, "Invalid coordinates, try --ra --dec or --az --alt."
            sys.exit(1)

    if not options.slew and not options.sync and not options.info:
        print >> sys.stderr, "Please, ask me anything to do."
        sys.exit(1)

    if options.slew and options.sync:
        print >> sys.stderr, "Cannot slew and sync at the same time."
        sys.exit(1)

    # 
    # start
    #

    manager = Manager(port=11000)

    telescope = None

    # use an already running telescope
    if options.telescope:
        try:
            telescope = manager.getProxy(options.telescope[0])
        except (ObjectNotFoundException, ChimeraObjectException), e:
            print >> sys.stderr, "Cannot find telescope %s. (%s)" % (options.telescope[0], e)
            manager.shutdown()
            sys.exit(1)

    # create a new telescope using selected driver
    else:
        try:

            manager.addClass(Site, "lna", {"name": "LNA",
                                           "latitude": "-22 32 03",
                                           "longitude": "-45 34 57",
                                           "altitude": "1896",
                                           "utc_offset": "-3"})
        
            driver = manager.addLocation(options.driver[-1], path=drivers_path)
            telescope = manager.addClass(Telescope, "tel", {"driver": options.driver[-1]})

        except (ObjectNotFoundException, ChimeraObjectException), e:
            print >> sys.stderr, "Cannot find telescope driver %s. (%s)" % (options.driver[-1],e)
            manager.shutdown()
            sys.exit(1)
    

    @callback(manager)
    def slewBegin(target):
        global options
        if not options.quiet:
            print 40*"="
            print "Slewing to %s ... " % target,
            sys.stdout.flush()
    
    @callback(manager)
    def slewComplete(position):
        global options, telescope
        if not options.quiet:
            print "OK."
            print 40*"="
            print "Current position ra/dec", position
            
            sys.stdout.flush()

    telescope.slewBegin    += slewBegin
    telescope.slewComplete += slewComplete

    if not options.quiet:
        pass

    # slew
    start = time.time()

    try:

        if options.info:
            try:
                print "current position ra/dec: %s" % telescope.getPositionRaDec()
                print "current position:az/alt: %s" % telescope.getPositionAzAlt()
            except Exception, e:
                print >> sys.stderr, "Error getting telescope coordinates. (%s)" % e

        elif options.sync:

            try:
                print "current position ra/dec: %s" % telescope.getPositionRaDec()
                sys.stdout.flush()
                print "syncing on ... ", target,
                sys.stdout.flush()
                telescope.syncRaDec(target)
                print "OK"
                sys.stdout.flush()
            except Exception, e:
                print >> sys.stderr, "Error trying to sync. (%s)" % e

        elif options.slew:
            try:
                if local:
                    telescope.slewToAzAlt(target)
                else:
                    telescope.slewToRaDec(target)

            except Exception, e:
                print >> sys.stderr, "Error trying to slew. (%s)" % e

    finally:
        telescope.slewBegin     -= slewBegin
        telescope.slewComplete  -= slewComplete

        manager.shutdown()

        if not options.quiet and not options.info:
            print 40*"="
            print "Total time: %.3fs" % (time.time()-start)
            print 40*"="

        sys.exit(0)
