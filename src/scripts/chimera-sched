#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

# chimera - observatory automation system
# Copyright (C) 2006-2009  P. Henrique Silva <henrique@astro.ufsc.br>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

from chimera.core.cli import ChimeraCLI, action
from chimera.util.position import Position
from chimera.core.constants import DEFAULT_PROGRAM_DATABASE

import re
import sys
import os
import shutil

class ChimeraSched (ChimeraCLI):
    
    def __init__ (self):
        ChimeraCLI.__init__(self, "chimera-sched", "Scheduler controller", 0.1, port=9010)
    

        self.addHelpGroup("SCHEDULER", "Scheduler")
        self.addController(name="scheduler", cls="Scheduler", required=True,
                           help="Scheduler controller to be used", helpGroup="SCHEDULER")

        databaseHelp = """Database options\n\tThe file must have the following format:

        RA Dec  Epoch TYPE   NAME   N*(f1:t1:n1, f2:t2:n2, ......)
        0   0    2000 FLAT   flat1  3*(RED:10:1, BLUE:8:2, GREEN:9:3)
        0   0    2000 ZERO   zero1  1*(CLEAR:10:10)
        0   0    2000 DARK   dark1  4*(RED:10:1, RED:20:1, RED:30:1)
        14:00:00 -30:00:00  2000 OBJECT  obj1 2*(RED:7:1, BLUE:6:2, GREEN:5:2)
        15:00:00 -30:00:00  2000 OBJECT  obj1 2*(RED:7:1, BLUE:6:2, GREEN:5:2)
        """

        self.addHelpGroup("DB" , databaseHelp)
        self.addHelpGroup("RUN" , "Start/Stop/Info")

        self.addParameters(dict(name="filename", long="file", short="f", helpGroup="DB", default="",
                                help="Filename of the input database.", metavar="FILENAME"))

    @action(long="new", help="Generate a new database from a text file",
            helpGroup="DB", actionGroup="DB")
    def generateDatabase(self, options):

        f = None
        try:
            f = open(options.filename, "r")
        except:
            self.exit("Could not find '%s'." % options.filename)
    

        # check if database exists
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE, DEFAULT_PROGRAM_DATABASE+".bak")
            os.unlink(DEFAULT_PROGRAM_DATABASE)

        from elixir import session
        from chimera.controllers.scheduler.model import (Program, Point,
                                                         Expose, PointVerify, AutoFocus)

        lineRe = re.compile('(?P<ra>[\d:-]+)\s+(?P<dec>\+?[\d:-]+)\s+(?P<epoch>[\d]+)\s+(?P<imagetype>[\w]+)'
                            '\s+(?P<objname>[\w-]+)\s+(?P<exposures>[\w\d\s:\*\(\),]*)')
        programs = []
    
        for i, line in enumerate(f):
    
            if line.startswith("#"): continue
            if len(line) == 1: continue
    
            matchs = lineRe.search(line)
    
            if matchs is None:
                print "Couldn't process line #%d" % i
                continue
    
            params = matchs.groupdict()
    
            position  = Position.fromRaDec(params['ra'], params['dec'], params['epoch'])
            imagetype = params['imagetype']
            objname   = params['objname']
    
            multiplier, exps = params['exposures'].split("*")
            try:
                multiplier = int(multiplier)
            except ValueError:
                multiplier = 1
    
            exps = exps.replace("(", "").replace(")", "").split(",")
            
            for i in range(multiplier):
    
                program = Program(name="program-%s-%03d" % (objname, i))
                program.actions.append(Point(targetRaDec=position))
    
                if i == 0:
                    program.actions.append(AutoFocus(start=1500, end=3000, step=250, filter="R", exptime=10))
                    program.actions.append(PointVerify(here=True))
    
                for exp in exps:
                    filter, exptime, frames = exp.strip().split(":")
                    print multiplier, "*", imagetype, objname, position, filter, exptime, frames
    
                    if imagetype.upper() in ("OBJECT", "FLAT"):
                        shutter = "OPEN"
                    else:
                        shutter = "CLOSE"
    
                    program.actions.append(Expose(shutter=shutter,
                                                  filename="%s-$DATE-$TIME" % objname,
                                                  #filter=filter,
                                                  frames=frames,
                                                  exptime=exptime,
                                                  imageType=imagetype,
                                                  objectName=objname))
                programs.append(program)
    
        for program in programs:
            program.flush()
    
        session.commit()

        self.out("Database created. Restart the scheduler to run it with the new database.")

    
    @action(help="Start the scheduler", helpGroup="RUN", actionGroup="RUN")
    def start(self, options):
        self.scheduler.start()
        self.out("OK")

    @action(help="Stop the scheduler", helpGroup="RUN", actionGroup="RUN")
    def stop(self, options):
        self.scheduler.pause()
        self.out("OK")

    @action(help="Restart the scheduler", helpGroup="RUN", actionGroup="RUN")
    def restart(self, options):
        self.scheduler.pause()
        self.scheduler.start()
        self.out("OK")

    @action(help="Print scheduler information", helpGroup="RUN")
    def info(self, options):
        self.out("="*40)
        self.out("Scheduler: %s" % self.scheduler.getLocation())
        self.out("State: %s" % self.scheduler.state())
        self.out("="*40)

def main():
    cli = ChimeraSched()
    return cli.run(sys.argv)
    
if __name__ == '__main__':
    main()
